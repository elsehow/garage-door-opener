//
// garage door opener
// elsehow    github.com/elsehow
// MIT license // 2015
//
// exposes two functions:
//
//   sender(seed, start_i)
//     .check(code)
//
//     s = sender(my_seed, 43)
//     s.next()
//     > 5326294
//
//   receiver(seed, start_i)
//     .next()
//
//     r = receiver(my_seed, 43)
//     r.check(5326294)
//     > False
//

var _           = require('lodash')
  , Randojs     = require('random-js')
  , num_codes   = 1024


var mod_max = function (v) {
  return v % num_codes
}

var circular_inc = function (v) {
  return mod_max(v + 1)
}

// returns a list of size n filled with random numbers generated by prng
var list_of_codes = function (prng, num) {
  return _.map(_.range(num), prng)
}

// reads buffer circularly given some number n
var read_buffer = function (buff, n) {
  return buff[mod_max(n)]
}

// returns the next n items from buff, read circularly, starting at i
var circular_next_n = function (buff, i, n) {
  return _.map(_.range(i, i + n), function(index) {
    return read_buffer(buff, index)
  })
}

// returns a list of 
var codes_from_seed = function (s) {
  var mt = Randojs.engines.mt19937()
  mt.seed(s)
  mt.discard(1024)
  return list_of_codes(mt, num_codes)
}

module.exports = {

  // s = sender(my_seed, 43)
  // s.next()
  // > 5326294
  sender: function (seed, next_code_i) {
    var codes, nextCode, next_i
    var codes = codes_from_seed(seed)
    var next_i = next_code_i
    var nextCode = function() {
      var c = read_buffer(codes, next_i)
      next_i = circular_inc(next_i)
      return c
    }
    return {
      next: nextCode
    }
  }

  // r = receiver(my_seed, 43)
  // r.check(5326294)
  // > False
  , receiver: function(seed, next_code_i) {
    var codes = codes_from_seed(seed)
    var next_i = next_code_i
    var codeIsGood = function(index) {
      next_i = circular_inc(index)
      return true
    }
    var checkCode = function(c) {
      var next = read_buffer(codes, next_i)
      if (next === c) {
        return codeIsGood(next_i)
      } else {
        var next_256 = circular_next_n(codes, next_i, 256)
        var i = _.indexOf(next_256, c)
        if (i > -1) {
          var index_in_buffer = mod_max(i+next_i)
          return codeIsGood(index_in_buffer)
        }
      }
      return false
    }
    return {
      check: checkCode
    }
  }
}

